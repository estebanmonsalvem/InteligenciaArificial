{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "probabilidades:  [ 0.34615385  0.23076923  0.34615385  0.07692308]\n",
      "porcentajes (%):  [ 34.61538462  23.07692308  34.61538462   7.69230769]\n"
     ]
    }
   ],
   "source": [
    "#Ejercicio Numero 1.1 Capacidad Mínima: 16\n",
    "import numpy as np\n",
    "\n",
    "aptitudes = np.array([45.0,30.0,45.0,10.0]) #funciones de aptitud de los individuos de la poblacion\n",
    "valor=np.array([3,5,9,5])\n",
    "restriccion=16\n",
    "n = aptitudes.shape[0]\n",
    "\n",
    "#Calculemos las probabilidades utilizando ciclos (implementacion explicita)\n",
    "prob_loop = np.zeros([n])\n",
    "for i in range(n):\n",
    "    prob_loop[i] = aptitudes[i] / np.sum(aptitudes)\n",
    "    \n",
    "#Implementemos lo anterior en forma vectorizada\n",
    "prob_vect = aptitudes / np.sum(aptitudes)\n",
    "print(\"probabilidades: \", prob_vect)\n",
    "print(\"porcentajes (%): \", prob_vect*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ruleta generada:  0.6121025345374244\n",
      "probabilidades acumuladas:  [ 0.34615385  0.57692308  0.92307692  1.        ]\n",
      "Valor: 45.0 Posicion:  2  Con peso de: 9\n",
      "Peso de la bolsa: 9\n",
      "Ruleta generada:  0.5765458734083388\n",
      "probabilidades acumuladas:  [ 0.34615385  0.57692308  0.92307692  1.        ]\n",
      "Valor: 30.0 Posicion:  1  Con peso de: 5\n",
      "Peso de la bolsa: "
     ]
    }
   ],
   "source": [
    "#Continuación.\n",
    "bolsa=0\n",
    "number=-1 #debe verificar que los dos individuos seleccionados sean DIFERENTES, es decir, que en la ejecución de dos ruletas (una para cada individuo) no se seleccione el mismo individuo.     \n",
    "\n",
    "while(bolsa<=restriccion):    \n",
    "    prob_acumuladas = np.cumsum(prob_vect)    \n",
    "    ruleta_random = np.random.rand()     \n",
    "    individuo_seleccionado = np.argmax(prob_acumuladas >= ruleta_random  )   \n",
    "    for i in range(len(prob_acumuladas)):\n",
    "        if(number== individuo_seleccionado):  #Validamos que la variable number no sea la misma que la anterior.\n",
    "            break\n",
    "        if((bolsa+valor[individuo_seleccionado])<=restriccion): # Verificamos si el individuo seleccionado hace que la bolsa se rompa\n",
    "            print(\"Ruleta generada: \", ruleta_random)            #Sino es el caso imprime.\n",
    "            print(\"probabilidades acumuladas: \", prob_acumuladas)           \n",
    "            print(\"Valor:\", aptitudes[individuo_seleccionado],\"Posicion: \", individuo_seleccionado, \" Con peso de:\",valor[individuo_seleccionado])\n",
    "            number= individuo_seleccionado        #Actualiza el number seleccionado. Así variará.\n",
    "            bolsa+= valor[individuo_seleccionado] #Suma el valor de la bolsa.            \n",
    "            print (\"Peso de la bolsa:\",bolsa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Ejercicio Numero 1.2Capacidad Mínima: 102\n",
    "import numpy as np\n",
    "\n",
    "aptitudes = np.array([15.0,100.0,90.0,60.0,40.0,15.0,10.0,1.0]) #funciones de aptitud de los individuos de la poblacion\n",
    "valor=np.array([2,20,20,30,40,30,60,10])\n",
    "restriccion=102\n",
    "n = aptitudes.shape[0]\n",
    "\n",
    "#Calculemos las probabilidades utilizando ciclos (implementacion explicita)\n",
    "prob_loop = np.zeros([n])\n",
    "for i in range(n):\n",
    "    prob_loop[i] = aptitudes[i] / np.sum(aptitudes)\n",
    "    \n",
    "#Implementemos lo anterior en forma vectorizada\n",
    "prob_vect = aptitudes / np.sum(aptitudes)\n",
    "print(\"probabilidades: \", prob_vect)\n",
    "print(\"porcentajes (%): \", prob_vect*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Continuación.\n",
    "bolsa=0\n",
    "number=-1 #debe verificar que los dos individuos seleccionados sean DIFERENTES, es decir, que en la ejecución de dos ruletas (una para cada individuo) no se seleccione el mismo individuo.     \n",
    "\n",
    "while(bolsa<=restriccion):    \n",
    "    prob_acumuladas = np.cumsum(prob_vect)    \n",
    "    ruleta_random = np.random.rand()     \n",
    "    individuo_seleccionado = np.argmax(prob_acumuladas >= ruleta_random  )   \n",
    "    for i in range(len(prob_acumuladas)):\n",
    "        if(number== individuo_seleccionado):  #Validamos que la variable number no sea la misma que la anterior.\n",
    "            break\n",
    "        if((bolsa+valor[individuo_seleccionado])<=restriccion): # Verificamos si el individuo seleccionado hace que la bolsa se rompa\n",
    "            print(\"Ruleta generada: \", ruleta_random)            #Sino es el caso imprime.\n",
    "            print(\"probabilidades acumuladas: \", prob_acumuladas)           \n",
    "            print(\"Valor:\", aptitudes[individuo_seleccionado],\"Posicion: \", individuo_seleccionado, \" Con peso de:\",valor[individuo_seleccionado])\n",
    "            number= individuo_seleccionado        #Actualiza el number seleccionado. Así variará.\n",
    "            bolsa+= valor[individuo_seleccionado] #Suma el valor de la bolsa.            \n",
    "            print (\"Peso de la bolsa:\",bolsa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Ejercicio Numero 1.2Capacidad Mínima: 50\n",
    "import numpy as np\n",
    "\n",
    "aptitudes = np.array([70.0,20.0,39.0,37.0,7.0,5.0,10.0]) #funciones de aptitud de los individuos de la poblacion\n",
    "valor=np.array([31,10,20,19,4,3,6])\n",
    "restriccion=50\n",
    "n = aptitudes.shape[0]\n",
    "\n",
    "#Calculemos las probabilidades utilizando ciclos (implementacion explicita)\n",
    "prob_loop = np.zeros([n])\n",
    "for i in range(n):\n",
    "    prob_loop[i] = aptitudes[i] / np.sum(aptitudes)\n",
    "    \n",
    "#Implementemos lo anterior en forma vectorizada\n",
    "prob_vect = aptitudes / np.sum(aptitudes)\n",
    "print(\"probabilidades: \", prob_vect)\n",
    "print(\"porcentajes (%): \", prob_vect*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Continuación.\n",
    "bolsa=0\n",
    "number=-1 #debe verificar que los dos individuos seleccionados sean DIFERENTES, es decir, que en la ejecución de dos ruletas (una para cada individuo) no se seleccione el mismo individuo.     \n",
    "\n",
    "while(bolsa<=restriccion):    \n",
    "    prob_acumuladas = np.cumsum(prob_vect)    \n",
    "    ruleta_random = np.random.rand()     \n",
    "    individuo_seleccionado = np.argmax(prob_acumuladas >= ruleta_random  )   \n",
    "    for i in range(len(prob_acumuladas)):\n",
    "        if(number== individuo_seleccionado):  #Validamos que la variable number no sea la misma que la anterior.\n",
    "            break\n",
    "        if((bolsa+valor[individuo_seleccionado])<=restriccion): # Verificamos si el individuo seleccionado hace que la bolsa se rompa\n",
    "            print(\"Ruleta generada: \", ruleta_random)            #Sino es el caso imprime.\n",
    "            print(\"probabilidades acumuladas: \", prob_acumuladas)           \n",
    "            print(\"Valor:\", aptitudes[individuo_seleccionado],\"Posicion: \", individuo_seleccionado, \" Con peso de:\",valor[individuo_seleccionado])\n",
    "            number= individuo_seleccionado        #Actualiza el number seleccionado. Así variará.\n",
    "            bolsa+= valor[individuo_seleccionado] #Suma el valor de la bolsa.            \n",
    "            print (\"Peso de la bolsa:\",bolsa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('probabilidades: ', array([ 0.2675841 ,  0.3058104 ,  0.3440367 ,  0.01529052,  0.05351682,\n",
      "        0.00611621,  0.00382263,  0.00382263]))\n",
      "('porcentajes (%): ', array([ 26.75840979,  30.58103976,  34.40366972,   1.52905199,\n",
      "         5.35168196,   0.6116208 ,   0.382263  ,   0.382263  ]))\n"
     ]
    }
   ],
   "source": [
    "#Ejercicio Numero 1.2Capacidad Mínima: 104\n",
    "import numpy as np\n",
    "\n",
    "aptitudes = np.array([350.0,400.0,450.0,20.0,70.0,8.0,5.0,5.0]) #funciones de aptitud de los individuos de la poblacion\n",
    "valor=np.array([25,35,45,5,25,3,2,2])\n",
    "restriccion=104\n",
    "n = aptitudes.shape[0]\n",
    "\n",
    "#Calculemos las probabilidades utilizando ciclos (implementacion explicita)\n",
    "prob_loop = np.zeros([n])\n",
    "for i in range(n):\n",
    "    prob_loop[i] = aptitudes[i] / np.sum(aptitudes)\n",
    "    \n",
    "#Implementemos lo anterior en forma vectorizada\n",
    "prob_vect = aptitudes / np.sum(aptitudes)\n",
    "print(\"probabilidades: \", prob_vect)\n",
    "print(\"porcentajes (%): \", prob_vect*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Ruleta generada: ', 0.9494764305752015)\n",
      "('probabilidades acumuladas: ', array([ 0.2675841 ,  0.5733945 ,  0.91743119,  0.93272171,  0.98623853,\n",
      "        0.99235474,  0.99617737,  1.        ]))\n",
      "('Valor:', 70.0, 'Posicion: ', 4, ' Con peso de:', 25)\n",
      "('Peso de la bolsa:', 25)\n",
      "('Ruleta generada: ', 0.7958743977991981)\n",
      "('probabilidades acumuladas: ', array([ 0.2675841 ,  0.5733945 ,  0.91743119,  0.93272171,  0.98623853,\n",
      "        0.99235474,  0.99617737,  1.        ]))\n",
      "('Valor:', 450.0, 'Posicion: ', 2, ' Con peso de:', 45)\n",
      "('Peso de la bolsa:', 70)\n",
      "('Ruleta generada: ', 0.032603577046948606)\n",
      "('probabilidades acumuladas: ', array([ 0.2675841 ,  0.5733945 ,  0.91743119,  0.93272171,  0.98623853,\n",
      "        0.99235474,  0.99617737,  1.        ]))\n",
      "('Valor:', 350.0, 'Posicion: ', 0, ' Con peso de:', 25)\n",
      "('Peso de la bolsa:', 95)\n",
      "('Ruleta generada: ', 0.9997103125845863)\n",
      "('probabilidades acumuladas: ', array([ 0.2675841 ,  0.5733945 ,  0.91743119,  0.93272171,  0.98623853,\n",
      "        0.99235474,  0.99617737,  1.        ]))\n",
      "('Valor:', 5.0, 'Posicion: ', 7, ' Con peso de:', 2)\n",
      "('Peso de la bolsa:', 97)\n",
      "('Ruleta generada: ', 0.9866809860762937)\n",
      "('probabilidades acumuladas: ', array([ 0.2675841 ,  0.5733945 ,  0.91743119,  0.93272171,  0.98623853,\n",
      "        0.99235474,  0.99617737,  1.        ]))\n",
      "('Valor:', 8.0, 'Posicion: ', 5, ' Con peso de:', 3)\n",
      "('Peso de la bolsa:', 100)\n",
      "('Ruleta generada: ', 0.9967418261806492)\n",
      "('probabilidades acumuladas: ', array([ 0.2675841 ,  0.5733945 ,  0.91743119,  0.93272171,  0.98623853,\n",
      "        0.99235474,  0.99617737,  1.        ]))\n",
      "('Valor:', 5.0, 'Posicion: ', 7, ' Con peso de:', 2)\n",
      "('Peso de la bolsa:', 102)\n",
      "('Ruleta generada: ', 0.9928032772218905)\n",
      "('probabilidades acumuladas: ', array([ 0.2675841 ,  0.5733945 ,  0.91743119,  0.93272171,  0.98623853,\n",
      "        0.99235474,  0.99617737,  1.        ]))\n",
      "('Valor:', 5.0, 'Posicion: ', 6, ' Con peso de:', 2)\n",
      "('Peso de la bolsa:', 104)\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0mTraceback (most recent call last)",
      "\u001b[1;32m<ipython-input-2-9dc615124046>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;32mwhile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbolsa\u001b[0m\u001b[1;33m<=\u001b[0m\u001b[0mrestriccion\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m     \u001b[0mprob_acumuladas\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcumsum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mprob_vect\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m     \u001b[0mruleta_random\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrand\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      8\u001b[0m     \u001b[0mindividuo_seleccionado\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mprob_acumuladas\u001b[0m \u001b[1;33m>=\u001b[0m \u001b[0mruleta_random\u001b[0m  \u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mprob_acumuladas\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "#Continuación.\n",
    "bolsa=0\n",
    "number=-1 #debe verificar que los dos individuos seleccionados sean DIFERENTES, es decir, que en la ejecución de dos ruletas (una para cada individuo) no se seleccione el mismo individuo.     \n",
    "\n",
    "while(bolsa<=restriccion):    \n",
    "    prob_acumuladas = np.cumsum(prob_vect)    \n",
    "    ruleta_random = np.random.rand()     \n",
    "    individuo_seleccionado = np.argmax(prob_acumuladas >= ruleta_random  )   \n",
    "    for i in range(len(prob_acumuladas)):\n",
    "        if(number== individuo_seleccionado):  #Validamos que la variable number no sea la misma que la anterior.\n",
    "            break\n",
    "        if((bolsa+valor[individuo_seleccionado])<=restriccion): # Verificamos si el individuo seleccionado hace que la bolsa se rompa\n",
    "            print(\"Ruleta generada: \", ruleta_random)            #Sino es el caso imprime.\n",
    "            print(\"probabilidades acumuladas: \", prob_acumuladas)           \n",
    "            print(\"Valor:\", aptitudes[individuo_seleccionado],\"Posicion: \", individuo_seleccionado, \" Con peso de:\",valor[individuo_seleccionado])\n",
    "            number= individuo_seleccionado        #Actualiza el number seleccionado. Así variará.\n",
    "            bolsa+= valor[individuo_seleccionado] #Suma el valor de la bolsa.            \n",
    "            print (\"Peso de la bolsa:\",bolsa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('individuo seleccionado: ', 14, 'value', 7.0)\n",
      "('individuo seleccionado: ', 6, 'value', 2.5)\n",
      "('individuo seleccionado: ', 16, 'value', 7.0)\n",
      "('individuo seleccionado: ', 10, 'value', 3.5)\n",
      "('individuo seleccionado: ', 19, 'value', 7.0)\n",
      "('individuo seleccionado: ', 17, 'value', 7.0)\n",
      "('individuo seleccionado: ', 7, 'value', 2.5)\n",
      "('individuo seleccionado: ', 18, 'value', 7.0)\n",
      "('individuo seleccionado: ', 5, 'value', 2.5)\n",
      "('individuo seleccionado: ', 12, 'value', 3.5)\n",
      "('individuo seleccionado: ', 11, 'value', 3.5)\n",
      "('individuo seleccionado: ', 4, 'value', 2.5)\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAD8CAYAAABn919SAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAEOdJREFUeJzt3WuMnFd9x/HvLzGpvaFLQF6wRVCdFkgVRW2DthSaFgMB\nFCAivOiLxA4CiuS6QjS0qFGgUqPab5BaUSo1WLKSkCDScAmmrWiLoFyaWsJB6xCaq4pqB3Dqy9KI\ncmkMDf73xUwax3K8u3Ofs9+PtHpmnnl2z//Z1f7mzJkz50lVIUmafmeNuwBJ0mAY6JLUCANdkhph\noEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGrFnqgCS3AFcAx6rq4pP2vwd4N/Az4B+q6rqlftb6\n9etr06ZNvVcrSavQ/v37v1dVc0sdt2SgA7cCfw187MkdSV4DXAn8alX9JMnzl1PUpk2bWFhYWM6h\nkqSuJN9eznFLDrlU1V3AY6fs/n3gg1X1k+4xx1ZcoSRpoHodQ38p8NtJ7k7yL0l+/ZkOTLItyUKS\nhcXFxR6bkyQtpddAXwM8D3gF8MfAp5LkdAdW1e6qmq+q+bm5JYeAJEk96jXQDwF7quPrwAlg/eDK\nkiStVK+B/rfAawCSvBQ4B/jeoIqSJK3ckoGe5A7ga8CFSQ4leRdwC/CLSe4HPgG8vbxShiSd3uHD\nsHkzHDky1GaWnLZYVVc/w0PXDLgWSWrTzp2wdy/s2AEf+cjQmvGTopI0LOvWQQK7dsGJE51t0tk/\nBAa6JA3LgQOwZQvMzHTuz8zA1q1w8OBQmjPQJWlYNm6E2Vk4fhzWru1sZ2dhw4ahNGegS9IwHT0K\n27fDvn2d7RDfGF3OWi6SpF7t2fPU7RtvHGpT9tAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0\nSWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIasZxrit6S5Fj3+qGnPva+JJVk/XDKkyQt13J6\n6LcCl5+6M8mLgDcA3xlwTerXiC5IK2myLBnoVXUX8NhpHvpL4DqgBl2U+nTyBWmnnU9O0rL1NIae\n5Erg0ar65oDrUT9GfEHakWjpyUkashUHepIZ4APAny7z+G1JFpIsLC4urrQ5rcSIL0g7VC0+OUlD\n1ksP/ZeAC4BvJnkEOB+4J8lpr3paVburar6q5ufm5nqvVEsb8QVph6qlJydpRFYc6FV1X1U9v6o2\nVdUm4BDwsqpykHMSjPCCtEPV0pOTNCJLXiQ6yR3Aq4H1SQ4BN1TVzcMuTD0a4QVph+7JJ6dt22D3\n7s4bpJKeUapGN0llfn6+FhYWRtbeqnX4MFx1FXzyk/ZopUnQ5/9kkv1VNb/UcX5StEXODJEmy4j+\nJ+2ht2Tdus5Y86nWroXHHx99PdJqN6D/SXvoq5EzQ6TJMuL/SQO9JS3ODPGToppmI/6fNNBb08q0\nxSf5foCm3Qj/Jx1Db1ELs1x8P0D6f46hr2Yt9Gp9P0BaMQO9JS2tf/Lk2OPjj8NZZ3W20/5+gDRk\nBnpLWuvVHj0KF10EVZ3ttL8fIA3Zkh/91xRpaZbLqWPoDzzQ+Vq3zjF06RnYQ29NK7NcWnu1IY2A\nPfTWtLI4V0uvNqQRsYeuydXKqw1pROyha3K18mpDGhF76JLUCANdkhphoEtSIwx0SWrEkoGe5JYk\nx5Lcf9K+P0/ycJJ/S/LZJOcNt0xJmmIjWgZ6OT30W4HLT9n3ReDiqvoV4N+B9w+4Lklqx/XXw113\ndbZDtGSgV9VdwGOn7PtCVT3RvbsPOH8ItUnSdHtywbyPfaxz/7bbhrpg3iDG0H8X+KcB/BxJassz\nXW9iSNeh6CvQk/wJ8ARw+xmO2ZZkIcnC4uJiP81J0nQ5eBBe/OKn73vJS+CRR4bSXM+BnuQdwBXA\n1jrDZY+qandVzVfV/NzcXK/NSdL02bgRnuiOTp9zTmf7xBNDW5Oop4/+J7kcuA7YXFX/M9iSJKkh\nl1wCb3oTbNsGu3d3ZrwMyZLXFE1yB/BqYD1wFLiBzqyWnwP+q3vYvqravlRjXlNUklZuudcUXbKH\nXlVXn2b3zT1VJUkaGj8pKkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQ\nJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDViyUBPckuSY0nuP2nf\n85J8Mcm3utvnDrdMSZpihw/D5s1w5MhQm1lOD/1W4PJT9l0PfKmqXgJ8qXtfknQ6O3fC3r2wY8dQ\nm1ky0KvqLuCxU3ZfCdzWvX0b8NYB1yVJ02/dOkhg1y44caKzTTr7h6DXMfQXVNXh7u0jwAue6cAk\n25IsJFlYXFzssTlJmkIHDsCWLTAz07k/MwNbt8LBg0Npru83RauqgDrD47urar6q5ufm5vptTpKm\nx8aNMDsLx4/D2rWd7ewsbNgwlOZ6DfSjSTYCdLfHBleSJDXk6FHYvh327etsh/jG6Joev+/vgbcD\nH+xu/25gFUlSS/bseer2jTcOtanlTFu8A/gacGGSQ0neRSfIX5/kW8DruvclSWO0ZA+9qq5+hocu\nG3AtkqQ++ElRSWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWp\nEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRNtsOHYfPmoV6HUWqFga7JtnMn7N0LO3aMuxJp4vUV\n6En+MMkDSe5PckeStYMq7Gnspa0+69ZBArt2wYkTnW3S2S/ptHoO9CQvBP4AmK+qi4GzgasGVdjT\n2EtbfQ4cgC1bYGamc39mBrZuhYMHx1uXNMH6HXJZA6xLsgaYAf6z/5JOYi9t9dq4EWZn4fhxWLu2\ns52dhQ0bxl2ZNLF6DvSqehT4C+A7wGHgv6vqC6cel2RbkoUkC4uLiytrxF7a6nb0KGzfDvv2dbYO\nuUlntKbXb0zyXOBK4ALg+8Cnk1xTVR8/+biq2g3sBpifn68VNWIvbXXbs+ep2zfeOL46pCnRz5DL\n64CDVbVYVf8L7AF+czBlncRemiQtS889dDpDLa9IMgM8DlwGLAykqpPZS5OkZelnDP1u4E7gHuC+\n7s/aPaC61A+neUqrUl+zXKrqhqr65aq6uKreVlU/GVRh6oPTPKVVyU+KtsRpntKqZqC3xGme0qpm\noLfEaZ7Sqmagt8ZpntKq1c+0RU0ip3lKq9Z09NCdhidJS5qOQHcaniQtabID3Wl4krRskx3oTsOT\npGWb7EB3Gp4kLdtkBzo4DU+Slmnypy06DU+SlmXye+iSpGUx0CWpEQa6JDXCQJekRhjoktQIA12S\nGtFXoCc5L8mdSR5O8lCSVw6qMEnSyvQ7D/2vgM9X1e8kOQeYGUBNkqQe9BzoSZ4DvAp4B0BV/RT4\n6WDKkiStVD9DLhcAi8BHk3wjyU1Jzh1QXZKkFeon0NcALwN2VdUlwI+B6089KMm2JAtJFhYXF/to\nTpJ0Jv0E+iHgUFXd3b1/J52Af5qq2l1V81U1Pzc310dzkqQz6TnQq+oI8N0kF3Z3XQY8OJCqJEkr\n1u8sl/cAt3dnuBwA3tl/SZKkXvQV6FV1LzA/oFokSX3wk6KS1AgDXZIaYaBLUiMMdElqhIEuSY0w\n0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANd\nkhrRd6AnOTvJN5J8bhAFSZJ6M4ge+rXAQwP4OZLUpsOHYfNmOHJkqM30FehJzgfeDNw0mHIkqUE7\nd8LevbBjx1Cb6beH/mHgOuDEAGqRpLasWwcJ7NoFJ050tkln/xD0HOhJrgCOVdX+JY7blmQhycLi\n4mKvzUnS9DlwALZsgZmZzv2ZGdi6FQ4eHEpz/fTQLwXekuQR4BPAa5N8/NSDqmp3Vc1X1fzc3Fwf\nzUnSlNm4EWZn4fhxWLu2s52dhQ0bhtJcz4FeVe+vqvOrahNwFfDlqrpmYJVJUguOHoXt22Hfvs52\niG+MrhnaT5YkwZ49T92+8cahNjWQQK+qrwJfHcTPkiT1xk+KSlIjDHRJaoSBLkmNMNAlqREGuiQ1\nwkCXpEZMR6CPaKUySZpm0xHoI1qpTJKm2WQH+ohXKpOkaTbZgT7ilcokaZpNdqCPeKUySZpmkx3o\nMNKVyiRpmk3+aosjXKlMkqbZ5PfQJUnLYqBLUiMMdElqhIEuSY0w0CWpEQa6JDWi50BP8qIkX0ny\nYJIHklw7yMIkwIXZpBXop4f+BPC+qroIeAXw7iQXDaYsqcuF2aRl6znQq+pwVd3Tvf1D4CHghYMq\nTKucC7NJKzaQMfQkm4BLgLtP89i2JAtJFhYXFwfRnFYDF2aTVqzvQE/ybOAzwHur6genPl5Vu6tq\nvqrm5+bm+m1Oq4ULs0kr1legJ3kWnTC/var2LHW8tCIuzCatSM+LcyUJcDPwUFV9aHAlSV0uzCat\nSD899EuBtwGvTXJv9+tNA6pLkrRCPffQq2ovkAHWIknqg58UlaRGGOiS1AgDXZIaYaBLUiMMdElq\nxHQEuivurYy/L2lVmo5Ad8W9lfH3Ja1KqaqRNTY/P18LCwvL/4Z16zpreJxq7Vp4/PHBFdYKf19S\nk5Lsr6r5pY6b7B66K+6tjL8vaVWb7EB3xb2V8fclrWqTHejginsr5e9LWrUmewxdktTIGLokadkM\ndElqhIEuSY0w0CWpEQa6JDXCQJekRox02mKSReDbPX77euB7AyxnnDyXydPKeYDnMqn6OZdfqKq5\npQ4aaaD3I8nCcuZhTgPPZfK0ch7guUyqUZyLQy6S1AgDXZIaMU2BvnvcBQyQ5zJ5WjkP8Fwm1dDP\nZWrG0CVJZzZNPXRJ0hlMfKAnuSXJsST3j7uWfiR5UZKvJHkwyQNJrh13Tb1KsjbJ15N8s3sufzbu\nmvqV5Owk30jyuXHX0o8kjyS5L8m9SaZ2adMk5yW5M8nDSR5K8spx19SLJBd2/xZPfv0gyXuH1t6k\nD7kkeRXwI+BjVXXxuOvpVZKNwMaquifJzwP7gbdW1YNjLm3FkgQ4t6p+lORZwF7g2qraN+bSepbk\nj4B5YLaqrhh3Pb1K8ggwX1VTPXc7yW3Av1bVTUnOAWaq6vvjrqsfSc4GHgV+o6p6/TzOGU18D72q\n7gIeG3cd/aqqw1V1T/f2D4GHgBeOt6reVMePunef1f2a7J7BGSQ5H3gzcNO4axEkeQ7wKuBmgKr6\n6bSHeddlwH8MK8xhCgK9RUk2AZcAd4+3kt51hyjuBY4BX6yqqT0X4MPAdcCJcRcyAAX8c5L9SbaN\nu5geXQAsAh/tDoPdlOTccRc1AFcBdwyzAQN9xJI8G/gM8N6q+sG46+lVVf2sqn4NOB94eZKpHA5L\ncgVwrKr2j7uWAfmt7t/ljcC7u0OW02YN8DJgV1VdAvwYuH68JfWnO2z0FuDTw2zHQB+h7njzZ4Db\nq2rPuOsZhO5L4a8Al4+7lh5dCrylO/b8CeC1ST4+3pJ6V1WPdrfHgM8CLx9vRT05BBw66VXfnXQC\nfpq9Ebinqo4OsxEDfUS6byTeDDxUVR8adz39SDKX5Lzu7XXA64GHx1tVb6rq/VV1flVtovOS+MtV\ndc2Yy+pJknO7b7jTHaJ4AzB1s8Oq6gjw3SQXdnddBkzd5IFTXM2Qh1ug89JmoiW5A3g1sD7JIeCG\nqrp5vFX15FLgbcB93bFngA9U1T+OsaZebQRu675rfxbwqaqa6ul+jXgB8NlO34E1wN9U1efHW1LP\n3gPc3h2qOAC8c8z19Kz75Pp64PeG3takT1uUJC2PQy6S1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWp\nEQa6JDXCQJekRvwfCu6ez/8hhdwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x8d30668>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "'''\n",
    "plot problem\n",
    "'''\n",
    "#Nota: Según ésta implementación se basa en tirar un dardo, esto significa que no tendremos en cuenta el valor del recorrido.\n",
    "#Nos orientamos al eje X como nuestro vector aptitud.\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "x=np.array([1, 1, 1, 1, 2.5, 2.5, 2.5, 2.5, 2.5, 3.5, 3.5, 3.5, 3.5, 3.5, 7.0, 7.0,  7.0, 7.0, 7.0, 7.0]) #cities x coordinate\n",
    "y=np.array([1, 3, 7, 8, 14, 13.5, 13, 7.5, 1.0, 2.0, 8.2, 12.9, 13.2, 13.9,  15.5, 13.5, 12.1, 12.0,10.0, 4]) #cities y coordinate\n",
    "\n",
    "plt.plot(x, y, 'r*')#cities\n",
    "\n",
    "\n",
    "n = x.shape[0]\n",
    "\n",
    "\n",
    "#Calculemos las probabilidades utilizando ciclos (implementacion explicita)\n",
    "lista_Closed=[0]\n",
    "\n",
    "    \n",
    "prob_vect = x / np.sum(x)\n",
    "#print(\"probabilidades: \", prob_vect)\n",
    "#print(\"porcentajes (%): \", prob_vect*100)\n",
    "\n",
    "def ask(inform,comparation):\n",
    "    for i in range(len(inform)):\n",
    "        if(inform[i]==comparation ):\n",
    "            return 1\n",
    "\n",
    "        \n",
    "for i in range(len(x)):\n",
    "    ruleta_random = np.random.rand()\n",
    "    prob_acumuladas = np.cumsum(prob_vect)\n",
    "     \n",
    "    individuo_seleccionado = np.argmax(prob_acumuladas >= ruleta_random)             \n",
    "    if(ask(lista_Closed,individuo_seleccionado)<>1):\n",
    "            lista_Closed.insert(i,individuo_seleccionado)\n",
    "            print(\"individuo seleccionado: \", individuo_seleccionado,\"value\",x[individuo_seleccionado])\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Problema minimizar_ la función  x^4-12x^3+15x^2+56x-60\n",
    "\n",
    "# Problema: No podríamos emplear en sí el método de la ruleta( Se tendría miles de numeros en la ruleta como los optimos)\n",
    "\n",
    "#Se podría hacer métodos como Newton Rahpson, dónde \n",
    "\n",
    "import numpy as np\n",
    "\n",
    "aptitudes = np.array([6.82, 1.11, 8.48, 2.57, 3.08]) #funciones de aptitud de los individuos de la poblacion\n",
    "n = aptitudes.shape[0]\n",
    "\n",
    "#Calculemos las probabilidades utilizando ciclos (implementacion explicita)\n",
    "prob_loop = np.zeros([n])\n",
    "for i in range(n):\n",
    "    prob_loop[i] = aptitudes[i] / np.sum(aptitudes)\n",
    "    \n",
    "print(\"probabilidades: \", prob_loop)\n",
    "print(\"porcentajes (%): \", prob_loop*100)\n",
    "\n",
    "\n",
    "#Implementemos lo anterior en forma vectorizada\n",
    "prob_vect = aptitudes / np.sum(aptitudes)\n",
    "print(\"probabilidades: \", prob_vect)\n",
    "print(\"porcentajes (%): \", prob_vect*100)\n",
    "\n",
    "for i in range(10):\n",
    "    ruleta_random = np.random.rand()\n",
    "    \n",
    "    #2. calculemos las probabilidades acumuladas\n",
    "    prob_acumuladas = np.cumsum(prob_loop)\n",
    "    \n",
    "    individuo_seleccionado = np.argmax(prob_acumuladas <= ruleta_random) \n",
    "    print(\"Posicion: \", individuo_seleccionado, \"X sub\", i, \" y Valor\" ,aptitudes[i])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Problema de máximizar función\n",
    "%matplotlib inline\n",
    "\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import numpy as np\n",
    "aptitudes = np.array([1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0])\n",
    "    \n",
    "n = aptitudes.shape[0]\n",
    "\n",
    "#Calculemos las probabilidades utilizando ciclos (implementacion explicita)\n",
    "prob_loop = np.zeros([n])\n",
    "for i in range(n):\n",
    "    prob_loop[i] = aptitudes[i] / np.sum(aptitudes)\n",
    "    \n",
    "print(\"probabilidades: \", prob_loop)\n",
    "print(\"porcentajes (%): \", prob_loop*100)\n",
    "\n",
    "#Utilicemos la probabilidades calculadas anteriormente y ejecutemos la ruleta\n",
    "\n",
    "#1. calculemos el valor aleatorio de la ruleta\n",
    "\n",
    "#3. seleccionemos un individuo segun el criterio explicado anteriormente\n",
    "#argmax retorna el indice del primer valor del vector que cumple con la condicion (prob_acumuladas >= ruleta_random)\n",
    "for i in range(10):\n",
    "    ruleta_random = np.random.rand()\n",
    "    \n",
    "    #2. calculemos las probabilidades acumuladas\n",
    "    prob_acumuladas = np.cumsum(prob_loop)\n",
    "    \n",
    "    individuo_seleccionado = np.argmax(prob_acumuladas >= ruleta_random) \n",
    "    print(\"Posicion: \", individuo_seleccionado, \"X sub\", i, \" y Valor\" ,aptitudes[i])\n",
    "    \n",
    "\n",
    "            \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "'''\n",
    "2.A Promedio de iteraciones necesarias para converger a la mejor solución\n",
    "2.A.1Para la solución de las mochilas se obtiene una solución más optimizada y máximizando a través de Solución de la ruleta.\n",
    "2.A.2Para el basado en TSP sería más optimo la del algoritmo generico porque el cruce,\n",
    "la mutación y la selección,  generaran un espacio de potencias soluciones. Para el de la rulela no se tendría como comparar\n",
    "una heurística por decirlo de ese modo que nos permita saber cual después de haberlo seleccionado por ruleta si me sirviría \n",
    "o no.\n",
    "2.A.3 Para el de las funciones es más optimo el de la ruleta, se ve diferencia de optimización, en vez de ir cogiendo\n",
    "numeros al azar  se tira y obtiene el que mejor posibilidad tiene.\n",
    "\n",
    "2.B Variabilidad del resultado.\n",
    "La variabilidad es visual y analítica, hay pocas probabilidades que se de el mismo resultado  con su respectiva secuencia\n",
    "ambos utilizan su metodología y llegarían al mismo resultado en alguna ocasión sin embargo, no con el mismo proceso EJ:\n",
    "Para las bolsas\n",
    "Se podría meter (3,9,3) a través de AZAR o generica mientras que en ruleta\n",
    "(9,3,3) Todo es posible, aunque sea poco su probabilidad.\n",
    "\n",
    "2.C Impacto del tamaño de la población inicial en la calidad de la solución generada\n",
    "El impacto es comparable al azar se generan muchos genes/hijos o numeros al azar depend. a comparación de la ruleta.\n",
    "\n",
    "3.Visualice mediante gráficos y tablas y argumente y discuta sobre los resutados de los puntos anteriores.\n",
    "Se hizo gráficos conforme a la velocidad y exactitud en cada metodología. Ambos tienen sus pros y encontra\n",
    "lo bueno es saber cómo y cuándo utilizarlo. Al parecer, tenemos visión de ello, esperemos estemos en lo correcto.\n",
    "\n",
    "\n",
    "**********************************************************************************************************\n",
    "Integrantes\n",
    "\n",
    "-Henry Bravo\n",
    "-John Esteban Monsalve Mazo\n",
    "**********************************************************************************************************"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
